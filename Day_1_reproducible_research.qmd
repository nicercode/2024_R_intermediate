---
title: "Day 1 - Reproducible research is way better for everyone"
format: html
---

# Schedule

- 08:30-09:00: pre-class installation issues
- 09:00-10:30: Session 1 - Welcome, Challenges to Reproducible Research 
- 10:00-10:30: Morning tea 
- 11:00-12:30: Session 2 - Collaboration and Version control with Git & Github
- 12:30-13:15: Lunch
- 13:15-14:45: Session 3 - Techniques for Reproducible Research (part 1)
- 15:00-16:00: Session 4 - Techniques for Reproducible Research (part 2)

# Welcome

Logistics

- toilets

Expectations

- Why are we here: need code & stats

- We are practising scientists, also trained as instructors for software and data carpentry
  - here to guide your learning
  - it's *one* way to do it, not the only way

- We will show you the key ingredients for data analysis the way we do it
  - we can't turn you into crack analysts in 2 days
  - continue your journey. Hopefully a fun one!

- We aim for course be inclusive
  - it's a diverse crowd, everyone has complimentary skills and experiences
  - there is no dumb question
  - anti-social behavior not welcome

- We try hard to move everyone along

- raised hands - I need help

- Live coding
  - We don't have fully worked files for you, there's lots of this kind of help on the web. 
  - We're going to do a lot of live coding -> why?
  - Use the circulated files to take notes as you follow along

Groups

- work in group of 3-5
- in groups
	- Introduce yourself
  - how long have you used R
  - What % of your time you expect to spend in the field/lab or at the computer

# Sesssion 1: Challenges to Reproducible Research 
<!-- Daniel -->

- The big vision of the course: 
  1. A workflow for reproducible research (today) and
  2. Techniques scaling up you computations (tomorrow)

- Goals for today: 
  1. Reproducibility for a) Yourself, b) Your collaborator (supervisor), c).Stranger publication
  2. Enjoy coding! Feeling in control. Start and stop projects. Collaboration. Effivient computations

- By the end of course, collaboratively built course notes and reproducible analyses, using new techniques

- Activity: Identify challenges for reproducible research

- Brainstorm of challenges
  - break into groups of 3-4
  - Part 1: identify 3 challenges/problems for reproducibility (share around the group)
  - Part 2: go deeper on 1 issue, including possible solutions

- Starting example:
  - Download repro, example (zip)
  - We're going to build on this!
  - The data: Penguins! 
  - Scaling up challenges   

# Session 2: Collaboration and Version control with Git & Github
<!-- Will -->

Topics

- what is a git repo
- what is a commit
- git vs github (and gitlab, bitbucket etc)
- syncing: pull & push
- Forks & Pull Requests
- browsing history on github

Activities (slide + demo):
<!-- Fonti -->

1. Fork the class repo, contribute via a PR
  - fork the repo
  - clone repo locally in GH desktop
  - Add a .md file with a short bio in a `doc/`
  - push to github 
  - create PR

2. [Optional] Start a new repository with your group
    - Add collaborators under Settings
    - start adding project files
    - Syncing across computers
    - Make and push changes in different files
    - Introduce a conflict
    - Resolve conflict

# Sessions 3-4: Technqiues for Reproducible Research 
<!-- Daniel -->

13:30-16:00

- Goal: shared notes on how to solve (in github repo)
  - demonstrators set up headings, then fill in as we go
- Voting: prioritise challenges for reporoducibility

## Organisation
<!-- (Daniel) -->

- directory, folder structure: data, outputs
- Rstudio projects
- Rmd/R/Qmq

## Data curation and storage
<!-- (Will) -->

- where
- read only
- metadata

## Reproducible code
<!-- (Daniel) -->

- Goal: rerun all the time
  - Rmd/R/Qmd -> export to console
  - catches: broken code, missing dependencies, 
  - traps: broken code, package updates, rversion,  slow compute (cluster), manual steps

- Don't repeat yourself. Why? 
  - avoid lots of cut and paste (functions tomorrow)
  - solve problem once, reuse
  - easier to update
  - safer

Strive to maintain clean, working code 

- clean master script 
- version control is your friend


## Saving outputs
<!-- (Will, Daniel) -->

figures (Will): 
  - ggsave, sepcify sizes, code it
  - formats: pdf vs png

Rendering docs (Daniel)
  - render docs: suppmat or reports
    - point & click vs coded
    - can format nicely

## Optimise Rstudio setup
<!-- (Fonti, Daniel) -->

no caching, outputs to console, don't save env

Tools > Global Options 

## R environment 
<!-- (Fonti) -->

- document packages

```{r}
sessionInfo()
```

```{r}
# install.packages("usethis")
?usethis::use_description()

usethis::use_description()
```

- renv

 You’ll then need to commit renv.lock, .Rprofile, renv/settings.json and renv/activate.R to version control, ensuring that others can recreate your project environment. If you’re using git, this is particularly simple because renv will create a .gitignore for you, and you can just commit all suggested files3.
```{r}
install.packages("renv")

library(renv)

init()

install()  
install.packages()

snapshot()

status()

restore()

update()
```

